{"version":3,"names":["cov_1w15bjvwok","actualCoverage","MCPError","Error","details","constructor","message","f","s","name","captureStackTrace","b","toMCPError","code","type","toJSON","stack","DatabaseError","SecurityError","ValidationError","DataError","ConfigError","NetworkError","PermissionError","TimeoutError","ResourceError","ErrorCodes","DATABASE","CONNECTION_FAILED","QUERY_EXECUTION_FAILED","TRANSACTION_FAILED","CONNECTION_TIMEOUT","POOL_EXHAUSTED","SECURITY","UNSAFE_QUERY","FORBIDDEN_KEYWORD","QUERY_TOO_COMPLEX","TABLE_ACCESS_DENIED","INJECTION_DETECTED","VALIDATION","INVALID_CONFIG","INVALID_PARAMETER","MISSING_REQUIRED_FIELD","INVALID_DATA_TYPE","OUT_OF_RANGE","DATA","TABLE_NOT_FOUND","COLUMN_NOT_FOUND","CONSTRAINT_VIOLATION","DATA_CORRUPTION","INCONSISTENT_DATA","PERMISSION","ACCESS_DENIED","INSUFFICIENT_PRIVILEGES","AUTHENTICATION_FAILED","AUTHORIZATION_FAILED","NETWORK","CONNECTION_REFUSED","NETWORK_TIMEOUT","DNS_RESOLUTION_FAILED","CONNECTION_LOST","RESOURCE","MEMORY_EXHAUSTED","DISK_FULL","CPU_OVERLOAD","QUOTA_EXCEEDED","GENERAL","UNKNOWN_ERROR","INTERNAL_ERROR","NOT_IMPLEMENTED","SERVICE_UNAVAILABLE","ErrorMessages","getErrorMessage","ErrorFactory","createDatabaseError","createSecurityError","createValidationError","createDataError","fromError","error","context","errorMessage","String","startsWith","originalError"],"sources":["D:\\project\\wms-cloud\\mcp-mysql-service\\src\\utils\\errors.ts"],"sourcesContent":["/**\r\n * 错误类定义\r\n * \r\n * 功能说明：\r\n * - 定义各种业务错误类型\r\n * - 提供统一的错误处理机制\r\n * - 支持错误码和详细信息\r\n * \r\n * @author WMS Cloud Team\r\n * @version 1.0.0\r\n */\r\n\r\n/**\r\n * 错误基类\r\n */\r\nexport abstract class MCPError extends Error {\r\n  abstract readonly code: string;\r\n  abstract readonly type: string;\r\n\r\n  constructor(\r\n    message: string,\r\n    public readonly details?: any\r\n  ) {\r\n    super(message);\r\n    this.name = this.constructor.name;\r\n    \r\n    // 确保错误堆栈正确显示\r\n    if (Error.captureStackTrace) {\r\n      Error.captureStackTrace(this, this.constructor);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 转换为MCP错误响应格式\r\n   */\r\n  toMCPError(): {\r\n    code: string;\r\n    message: string;\r\n    type: string;\r\n    details?: any;\r\n  } {\r\n    return {\r\n      code: this.code,\r\n      message: this.message,\r\n      type: this.type,\r\n      details: this.details\r\n    };\r\n  }\r\n\r\n  /**\r\n   * 转换为JSON格式\r\n   */\r\n  toJSON(): any {\r\n    return {\r\n      name: this.name,\r\n      code: this.code,\r\n      type: this.type,\r\n      message: this.message,\r\n      details: this.details,\r\n      stack: this.stack\r\n    };\r\n  }\r\n}\r\n\r\n/**\r\n * 数据库连接错误\r\n */\r\nexport class DatabaseError extends MCPError {\r\n  readonly type = 'DATABASE_ERROR';\r\n\r\n  constructor(\r\n    public readonly code: string,\r\n    message: string,\r\n    details?: any\r\n  ) {\r\n    super(message, details);\r\n  }\r\n}\r\n\r\n/**\r\n * 安全相关错误\r\n */\r\nexport class SecurityError extends MCPError {\r\n  readonly type = 'SECURITY_ERROR';\r\n\r\n  constructor(\r\n    public readonly code: string,\r\n    message: string,\r\n    details?: any\r\n  ) {\r\n    super(message, details);\r\n  }\r\n}\r\n\r\n/**\r\n * 验证错误\r\n */\r\nexport class ValidationError extends MCPError {\r\n  readonly type = 'VALIDATION_ERROR';\r\n\r\n  constructor(\r\n    public readonly code: string,\r\n    message: string,\r\n    details?: any\r\n  ) {\r\n    super(message, details);\r\n  }\r\n}\r\n\r\n/**\r\n * 数据错误\r\n */\r\nexport class DataError extends MCPError {\r\n  readonly type = 'DATA_ERROR';\r\n\r\n  constructor(\r\n    public readonly code: string,\r\n    message: string,\r\n    details?: any\r\n  ) {\r\n    super(message, details);\r\n  }\r\n}\r\n\r\n/**\r\n * 配置错误\r\n */\r\nexport class ConfigError extends MCPError {\r\n  readonly type = 'CONFIG_ERROR';\r\n\r\n  constructor(\r\n    public readonly code: string,\r\n    message: string,\r\n    details?: any\r\n  ) {\r\n    super(message, details);\r\n  }\r\n}\r\n\r\n/**\r\n * 网络错误\r\n */\r\nexport class NetworkError extends MCPError {\r\n  readonly type = 'NETWORK_ERROR';\r\n\r\n  constructor(\r\n    public readonly code: string,\r\n    message: string,\r\n    details?: any\r\n  ) {\r\n    super(message, details);\r\n  }\r\n}\r\n\r\n/**\r\n * 权限错误\r\n */\r\nexport class PermissionError extends MCPError {\r\n  readonly type = 'PERMISSION_ERROR';\r\n\r\n  constructor(\r\n    public readonly code: string,\r\n    message: string,\r\n    details?: any\r\n  ) {\r\n    super(message, details);\r\n  }\r\n}\r\n\r\n/**\r\n * 超时错误\r\n */\r\nexport class TimeoutError extends MCPError {\r\n  readonly type = 'TIMEOUT_ERROR';\r\n\r\n  constructor(\r\n    public readonly code: string,\r\n    message: string,\r\n    details?: any\r\n  ) {\r\n    super(message, details);\r\n  }\r\n}\r\n\r\n/**\r\n * 资源不足错误\r\n */\r\nexport class ResourceError extends MCPError {\r\n  readonly type = 'RESOURCE_ERROR';\r\n\r\n  constructor(\r\n    public readonly code: string,\r\n    message: string,\r\n    details?: any\r\n  ) {\r\n    super(message, details);\r\n  }\r\n}\r\n\r\n/**\r\n * 错误代码常量\r\n */\r\nexport const ErrorCodes = {\r\n  // 数据库错误\r\n  DATABASE: {\r\n    CONNECTION_FAILED: 'CONNECTION_FAILED',\r\n    QUERY_EXECUTION_FAILED: 'QUERY_EXECUTION_FAILED',\r\n    TRANSACTION_FAILED: 'TRANSACTION_FAILED',\r\n    CONNECTION_TIMEOUT: 'CONNECTION_TIMEOUT',\r\n    POOL_EXHAUSTED: 'POOL_EXHAUSTED'\r\n  },\r\n  \r\n  // 安全错误\r\n  SECURITY: {\r\n    UNSAFE_QUERY: 'UNSAFE_QUERY',\r\n    FORBIDDEN_KEYWORD: 'FORBIDDEN_KEYWORD',\r\n    QUERY_TOO_COMPLEX: 'QUERY_TOO_COMPLEX',\r\n    TABLE_ACCESS_DENIED: 'TABLE_ACCESS_DENIED',\r\n    INJECTION_DETECTED: 'INJECTION_DETECTED'\r\n  },\r\n  \r\n  // 验证错误\r\n  VALIDATION: {\r\n    INVALID_CONFIG: 'INVALID_CONFIG',\r\n    INVALID_PARAMETER: 'INVALID_PARAMETER',\r\n    MISSING_REQUIRED_FIELD: 'MISSING_REQUIRED_FIELD',\r\n    INVALID_DATA_TYPE: 'INVALID_DATA_TYPE',\r\n    OUT_OF_RANGE: 'OUT_OF_RANGE'\r\n  },\r\n  \r\n  // 数据错误\r\n  DATA: {\r\n    TABLE_NOT_FOUND: 'TABLE_NOT_FOUND',\r\n    COLUMN_NOT_FOUND: 'COLUMN_NOT_FOUND',\r\n    CONSTRAINT_VIOLATION: 'CONSTRAINT_VIOLATION',\r\n    DATA_CORRUPTION: 'DATA_CORRUPTION',\r\n    INCONSISTENT_DATA: 'INCONSISTENT_DATA'\r\n  },\r\n  \r\n  // 权限错误\r\n  PERMISSION: {\r\n    ACCESS_DENIED: 'ACCESS_DENIED',\r\n    INSUFFICIENT_PRIVILEGES: 'INSUFFICIENT_PRIVILEGES',\r\n    AUTHENTICATION_FAILED: 'AUTHENTICATION_FAILED',\r\n    AUTHORIZATION_FAILED: 'AUTHORIZATION_FAILED'\r\n  },\r\n  \r\n  // 网络错误\r\n  NETWORK: {\r\n    CONNECTION_REFUSED: 'CONNECTION_REFUSED',\r\n    NETWORK_TIMEOUT: 'NETWORK_TIMEOUT',\r\n    DNS_RESOLUTION_FAILED: 'DNS_RESOLUTION_FAILED',\r\n    CONNECTION_LOST: 'CONNECTION_LOST'\r\n  },\r\n  \r\n  // 资源错误\r\n  RESOURCE: {\r\n    MEMORY_EXHAUSTED: 'MEMORY_EXHAUSTED',\r\n    DISK_FULL: 'DISK_FULL',\r\n    CPU_OVERLOAD: 'CPU_OVERLOAD',\r\n    QUOTA_EXCEEDED: 'QUOTA_EXCEEDED'\r\n  },\r\n  \r\n  // 通用错误\r\n  GENERAL: {\r\n    UNKNOWN_ERROR: 'UNKNOWN_ERROR',\r\n    INTERNAL_ERROR: 'INTERNAL_ERROR',\r\n    NOT_IMPLEMENTED: 'NOT_IMPLEMENTED',\r\n    SERVICE_UNAVAILABLE: 'SERVICE_UNAVAILABLE'\r\n  }\r\n} as const;\r\n\r\n/**\r\n * 错误消息映射\r\n */\r\nexport const ErrorMessages = {\r\n  [ErrorCodes.DATABASE.CONNECTION_FAILED]: '数据库连接失败',\r\n  [ErrorCodes.DATABASE.QUERY_EXECUTION_FAILED]: '查询执行失败',\r\n  [ErrorCodes.DATABASE.TRANSACTION_FAILED]: '事务执行失败',\r\n  [ErrorCodes.DATABASE.CONNECTION_TIMEOUT]: '数据库连接超时',\r\n  [ErrorCodes.DATABASE.POOL_EXHAUSTED]: '连接池资源耗尽',\r\n  \r\n  [ErrorCodes.SECURITY.UNSAFE_QUERY]: '不安全的查询操作',\r\n  [ErrorCodes.SECURITY.FORBIDDEN_KEYWORD]: '查询包含禁止的关键词',\r\n  [ErrorCodes.SECURITY.QUERY_TOO_COMPLEX]: '查询过于复杂',\r\n  [ErrorCodes.SECURITY.TABLE_ACCESS_DENIED]: '表访问被拒绝',\r\n  [ErrorCodes.SECURITY.INJECTION_DETECTED]: '检测到SQL注入攻击',\r\n  \r\n  [ErrorCodes.VALIDATION.INVALID_CONFIG]: '配置参数无效',\r\n  [ErrorCodes.VALIDATION.INVALID_PARAMETER]: '参数无效',\r\n  [ErrorCodes.VALIDATION.MISSING_REQUIRED_FIELD]: '缺少必需字段',\r\n  [ErrorCodes.VALIDATION.INVALID_DATA_TYPE]: '数据类型无效',\r\n  [ErrorCodes.VALIDATION.OUT_OF_RANGE]: '参数超出有效范围',\r\n  \r\n  [ErrorCodes.DATA.TABLE_NOT_FOUND]: '表不存在',\r\n  [ErrorCodes.DATA.COLUMN_NOT_FOUND]: '字段不存在',\r\n  [ErrorCodes.DATA.CONSTRAINT_VIOLATION]: '约束违反',\r\n  [ErrorCodes.DATA.DATA_CORRUPTION]: '数据损坏',\r\n  [ErrorCodes.DATA.INCONSISTENT_DATA]: '数据不一致',\r\n  \r\n  [ErrorCodes.PERMISSION.ACCESS_DENIED]: '访问被拒绝',\r\n  [ErrorCodes.PERMISSION.INSUFFICIENT_PRIVILEGES]: '权限不足',\r\n  [ErrorCodes.PERMISSION.AUTHENTICATION_FAILED]: '身份验证失败',\r\n  [ErrorCodes.PERMISSION.AUTHORIZATION_FAILED]: '授权失败',\r\n  \r\n  [ErrorCodes.NETWORK.CONNECTION_REFUSED]: '连接被拒绝',\r\n  [ErrorCodes.NETWORK.NETWORK_TIMEOUT]: '网络超时',\r\n  [ErrorCodes.NETWORK.DNS_RESOLUTION_FAILED]: 'DNS解析失败',\r\n  [ErrorCodes.NETWORK.CONNECTION_LOST]: '连接丢失',\r\n  \r\n  [ErrorCodes.RESOURCE.MEMORY_EXHAUSTED]: '内存不足',\r\n  [ErrorCodes.RESOURCE.DISK_FULL]: '磁盘空间不足',\r\n  [ErrorCodes.RESOURCE.CPU_OVERLOAD]: 'CPU负载过高',\r\n  [ErrorCodes.RESOURCE.QUOTA_EXCEEDED]: '超出配额限制',\r\n  \r\n  [ErrorCodes.GENERAL.UNKNOWN_ERROR]: '未知错误',\r\n  [ErrorCodes.GENERAL.INTERNAL_ERROR]: '内部错误',\r\n  [ErrorCodes.GENERAL.NOT_IMPLEMENTED]: '功能未实现',\r\n  [ErrorCodes.GENERAL.SERVICE_UNAVAILABLE]: '服务不可用'\r\n} as const;\r\n\r\n/**\r\n * 根据错误代码获取默认错误消息\r\n */\r\nexport function getErrorMessage(code: string): string {\r\n  return ErrorMessages[code as keyof typeof ErrorMessages] || '未知错误';\r\n}\r\n\r\n/**\r\n * 创建错误实例的工厂函数\r\n */\r\nexport class ErrorFactory {\r\n  /**\r\n   * 创建数据库错误\r\n   */\r\n  static createDatabaseError(code: string, message?: string, details?: any): DatabaseError {\r\n    return new DatabaseError(\r\n      code,\r\n      message || getErrorMessage(code),\r\n      details\r\n    );\r\n  }\r\n\r\n  /**\r\n   * 创建安全错误\r\n   */\r\n  static createSecurityError(code: string, message?: string, details?: any): SecurityError {\r\n    return new SecurityError(\r\n      code,\r\n      message || getErrorMessage(code),\r\n      details\r\n    );\r\n  }\r\n\r\n  /**\r\n   * 创建验证错误\r\n   */\r\n  static createValidationError(code: string, message?: string, details?: any): ValidationError {\r\n    return new ValidationError(\r\n      code,\r\n      message || getErrorMessage(code),\r\n      details\r\n    );\r\n  }\r\n\r\n  /**\r\n   * 创建数据错误\r\n   */\r\n  static createDataError(code: string, message?: string, details?: any): DataError {\r\n    return new DataError(\r\n      code,\r\n      message || getErrorMessage(code),\r\n      details\r\n    );\r\n  }\r\n\r\n  /**\r\n   * 从原始错误创建适当的错误类型\r\n   */\r\n  static fromError(error: any, context?: string): MCPError {\r\n    if (error instanceof MCPError) {\r\n      return error;\r\n    }\r\n\r\n    // 根据错误特征判断错误类型\r\n    const errorMessage = error.message || String(error);\r\n    \r\n    if (error.code?.startsWith('ER_') || error.code?.startsWith('ECONNREFUSED')) {\r\n      return new DatabaseError(\r\n        error.code || ErrorCodes.DATABASE.CONNECTION_FAILED,\r\n        errorMessage,\r\n        { originalError: error, context }\r\n      );\r\n    }\r\n\r\n    if (error.code === 'ETIMEDOUT' || error.code === 'ENOTFOUND') {\r\n      return new NetworkError(\r\n        error.code,\r\n        errorMessage,\r\n        { originalError: error, context }\r\n      );\r\n    }\r\n\r\n    // 默认返回通用错误\r\n    return new DatabaseError(\r\n      ErrorCodes.GENERAL.UNKNOWN_ERROR,\r\n      errorMessage,\r\n      { originalError: error, context }\r\n    );\r\n  }\r\n}"],"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","ignoreList":[]}