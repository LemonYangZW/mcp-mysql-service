{"file":"D:\\project\\wms-cloud\\mcp-mysql-service\\tests\\setup.ts","mappings":"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","names":[],"sources":["D:\\project\\wms-cloud\\mcp-mysql-service\\tests\\setup.ts"],"sourcesContent":["/**\n * 测试环境设置文件 - 全局测试配置\n * 用于配置Jest测试环境，提供Mock对象和测试工具函数\n * \n * @author WMS Cloud Team\n * @version 1.0.0\n */\n\nimport 'jest-extended';\nimport { config } from 'dotenv';\nimport { readFileSync } from 'fs';\nimport { join } from 'path';\n\n// ============================================================================\n// 环境配置\n// ============================================================================\n\n// 加载测试环境变量\nconfig({ path: '.env.test' });\n\n// 设置测试环境\nprocess.env.NODE_ENV = 'test';\nprocess.env.LOG_LEVEL = 'error'; // 测试时减少日志输出\n\n// ============================================================================\n// 全局Mock配置\n// ============================================================================\n\n// Mock Winston Logger以避免测试时的日志输出\njest.mock('winston', () => ({\n  createLogger: jest.fn(() => ({\n    info: jest.fn(),\n    warn: jest.fn(),\n    error: jest.fn(),\n    debug: jest.fn(),\n    log: jest.fn(),\n    child: jest.fn(() => ({\n      info: jest.fn(),\n      warn: jest.fn(),\n      error: jest.fn(),\n      debug: jest.fn(),\n      log: jest.fn(),\n    }))\n  })),\n  format: {\n    combine: jest.fn(),\n    timestamp: jest.fn(),\n    errors: jest.fn(),\n    json: jest.fn(),\n    colorize: jest.fn(),\n    simple: jest.fn(),\n    printf: jest.fn()\n  },\n  transports: {\n    Console: jest.fn(),\n    File: jest.fn()\n  }\n}));\n\n// ============================================================================\n// 全局测试工具函数\n// ============================================================================\n\n/**\n * 等待指定时间\n */\nglobal.sleep = (ms: number): Promise<void> => {\n  return new Promise(resolve => setTimeout(resolve, ms));\n};\n\n/**\n * 创建测试数据库配置\n */\nglobal.createTestDatabaseConfig = () => ({\n  host: process.env.TEST_DB_HOST || 'localhost',\n  port: parseInt(process.env.TEST_DB_PORT || '3306'),\n  database: process.env.TEST_DB_NAME || 'test_mcp_mysql',\n  username: process.env.TEST_DB_USER || 'test_user',\n  password: process.env.TEST_DB_PASSWORD || 'test_password',\n  pool: {\n    connectionLimit: 5,\n    queueLimit: 0,\n    acquireTimeout: 10000,\n    timeout: 10000,\n    reconnect: true\n  }\n});\n\n/**\n * 生成随机字符串\n */\nglobal.randomString = (length = 10): string => {\n  const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n  let result = '';\n  for (let i = 0; i < length; i++) {\n    result += chars.charAt(Math.floor(Math.random() * chars.length));\n  }\n  return result;\n};\n\n/**\n * 生成测试表名\n */\nglobal.generateTestTableName = (): string => {\n  return `test_table_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n};\n\n/**\n * 检查对象是否为空\n */\nglobal.isEmpty = (obj: any): boolean => {\n  return obj === null || obj === undefined || \n         (typeof obj === 'object' && Object.keys(obj).length === 0) ||\n         (typeof obj === 'string' && obj.trim().length === 0) ||\n         (Array.isArray(obj) && obj.length === 0);\n};\n\n/**\n * 深度克隆对象\n */\nglobal.deepClone = <T>(obj: T): T => {\n  if (obj === null || typeof obj !== 'object') return obj;\n  if (obj instanceof Date) return new Date(obj.getTime()) as any;\n  if (obj instanceof Array) return obj.map(item => deepClone(item)) as any;\n  if (typeof obj === 'object') {\n    const clonedObj = {} as any;\n    Object.keys(obj).forEach(key => {\n      clonedObj[key] = deepClone((obj as any)[key]);\n    });\n    return clonedObj;\n  }\n  return obj;\n};\n\n// ============================================================================\n// 测试断言扩展\n// ============================================================================\n\ndeclare global {\n  namespace jest {\n    interface Matchers<R> {\n      toBeValidDate(): R;\n      toBeValidUUID(): R;\n      toBeValidMySQLDataType(): R;\n      toHaveValidDatabaseStructure(): R;\n      toBeSecureQuery(): R;\n    }\n  }\n  \n  // 全局测试工具函数声明\n  function sleep(ms: number): Promise<void>;\n  function createTestDatabaseConfig(): any;\n  function randomString(length?: number): string;\n  function generateTestTableName(): string;\n  function isEmpty(obj: any): boolean;\n  function deepClone<T>(obj: T): T;\n}\n\n// 自定义匹配器\nexpect.extend({\n  /**\n   * 验证是否为有效日期\n   */\n  toBeValidDate(received: any) {\n    const pass = received instanceof Date && !isNaN(received.getTime());\n    if (pass) {\n      return {\n        message: () => `expected ${received} not to be a valid date`,\n        pass: true,\n      };\n    } else {\n      return {\n        message: () => `expected ${received} to be a valid date`,\n        pass: false,\n      };\n    }\n  },\n\n  /**\n   * 验证是否为有效UUID\n   */\n  toBeValidUUID(received: any) {\n    const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i;\n    const pass = typeof received === 'string' && uuidRegex.test(received);\n    if (pass) {\n      return {\n        message: () => `expected ${received} not to be a valid UUID`,\n        pass: true,\n      };\n    } else {\n      return {\n        message: () => `expected ${received} to be a valid UUID`,\n        pass: false,\n      };\n    }\n  },\n\n  /**\n   * 验证是否为有效的MySQL数据类型\n   */\n  toBeValidMySQLDataType(received: any) {\n    const validTypes = [\n      'TINYINT', 'SMALLINT', 'MEDIUMINT', 'INT', 'INTEGER', 'BIGINT',\n      'DECIMAL', 'NUMERIC', 'FLOAT', 'DOUBLE', 'REAL', 'BIT', 'BOOLEAN',\n      'SERIAL', 'CHAR', 'VARCHAR', 'BINARY', 'VARBINARY', 'TINYTEXT',\n      'TEXT', 'MEDIUMTEXT', 'LONGTEXT', 'TINYBLOB', 'BLOB', 'MEDIUMBLOB',\n      'LONGBLOB', 'DATE', 'TIME', 'DATETIME', 'TIMESTAMP', 'YEAR', 'JSON',\n      'GEOMETRY', 'POINT', 'LINESTRING', 'POLYGON'\n    ];\n    const pass = typeof received === 'string' && validTypes.includes(received.toUpperCase());\n    if (pass) {\n      return {\n        message: () => `expected ${received} not to be a valid MySQL data type`,\n        pass: true,\n      };\n    } else {\n      return {\n        message: () => `expected ${received} to be a valid MySQL data type`,\n        pass: false,\n      };\n    }\n  },\n\n  /**\n   * 验证数据库结构对象\n   */\n  toHaveValidDatabaseStructure(received: any) {\n    const hasRequiredFields = received &&\n      typeof received.tableName === 'string' &&\n      Array.isArray(received.columns) &&\n      received.columns.length > 0;\n    \n    if (hasRequiredFields) {\n      return {\n        message: () => `expected object not to have valid database structure`,\n        pass: true,\n      };\n    } else {\n      return {\n        message: () => `expected object to have valid database structure with tableName and columns`,\n        pass: false,\n      };\n    }\n  },\n\n  /**\n   * 验证是否为安全查询\n   */\n  toBeSecureQuery(received: any) {\n    const isString = typeof received === 'string';\n    const startsWithSelect = isString && received.trim().toLowerCase().startsWith('select');\n    const noForbiddenKeywords = isString && !/(insert|update|delete|drop|create|alter|truncate)/i.test(received);\n    \n    const pass = isString && startsWithSelect && noForbiddenKeywords;\n    \n    if (pass) {\n      return {\n        message: () => `expected \"${received}\" not to be a secure query`,\n        pass: true,\n      };\n    } else {\n      return {\n        message: () => `expected \"${received}\" to be a secure SELECT query without forbidden keywords`,\n        pass: false,\n      };\n    }\n  }\n});\n\n// ============================================================================\n// 测试生命周期钩子\n// ============================================================================\n\nbeforeAll(async () => {\n  // 测试开始前的全局设置\n  console.log('🧪 开始运行测试套件...');\n  \n  // 设置时区为UTC以保证测试一致性\n  process.env.TZ = 'UTC';\n});\n\nafterAll(async () => {\n  // 测试结束后的清理工作\n  console.log('✅ 测试套件执行完成');\n  \n  // 清理可能存在的定时器\n  jest.clearAllTimers();\n  \n  // 强制垃圾回收（如果可用）\n  if (global.gc) {\n    global.gc();\n  }\n});\n\nbeforeEach(() => {\n  // 每个测试前重置Mock状态\n  jest.clearAllMocks();\n});\n\nafterEach(() => {\n  // 每个测试后的清理工作\n  jest.restoreAllMocks();\n});\n\n// ============================================================================\n// 错误处理\n// ============================================================================\n\n// 捕获未处理的Promise拒绝\nprocess.on('unhandledRejection', (reason, promise) => {\n  console.error('Unhandled Rejection at:', promise, 'reason:', reason);\n  // 在测试环境中，我们希望测试失败而不是默默忽略错误\n  throw reason;\n});\n\n// 捕获未捕获的异常\nprocess.on('uncaughtException', (error) => {\n  console.error('Uncaught Exception:', error);\n  throw error;\n});\n\n// ============================================================================\n// 测试数据工厂\n// ============================================================================\n\n/**\n * 测试数据工厂类 - 用于生成各种测试数据\n */\nexport class TestDataFactory {\n  /**\n   * 创建测试用的表结构数据\n   */\n  static createTableStructure(overrides: Partial<any> = {}): any {\n    return {\n      tableName: 'test_users',\n      tableComment: '测试用户表',\n      engine: 'InnoDB',\n      charset: 'utf8mb4',\n      collation: 'utf8mb4_unicode_ci',\n      createTime: new Date().toISOString(),\n      columns: [\n        {\n          columnName: 'id',\n          dataType: 'BIGINT',\n          isNullable: false,\n          columnDefault: null,\n          columnComment: '主键ID',\n          extra: 'auto_increment',\n          position: 1\n        },\n        {\n          columnName: 'username',\n          dataType: 'VARCHAR',\n          maxLength: 50,\n          isNullable: false,\n          columnDefault: null,\n          columnComment: '用户名',\n          extra: '',\n          position: 2\n        }\n      ],\n      indexes: [\n        {\n          indexName: 'PRIMARY',\n          columnNames: ['id'],\n          indexType: 'BTREE',\n          isUnique: true,\n          isPrimary: true,\n          comment: '主键索引'\n        }\n      ],\n      ...overrides\n    };\n  }\n\n  /**\n   * 创建测试用的查询结果数据\n   */\n  static createQueryResult<T = any>(data: T[] = [], overrides: Partial<any> = {}): any {\n    return {\n      rows: data,\n      fields: [\n        {\n          name: 'id',\n          type: 'BIGINT',\n          nullable: false,\n          defaultValue: null,\n          comment: '主键ID',\n          extra: 'auto_increment'\n        }\n      ],\n      executionTime: 10,\n      rowCount: data.length,\n      ...overrides\n    };\n  }\n\n  /**\n   * 创建测试用的MCP响应数据\n   */\n  static createMCPResponse<T = any>(data?: T, success = true): any {\n    return {\n      success,\n      data,\n      error: success ? undefined : {\n        code: 'TEST_ERROR',\n        message: '测试错误',\n        type: 'SYSTEM_ERROR'\n      },\n      metadata: {\n        timestamp: new Date().toISOString(),\n        executionTime: 10\n      }\n    };\n  }\n\n  /**\n   * 创建测试用的数据库配置\n   */\n  static createDatabaseConfig(overrides: Partial<any> = {}): any {\n    return {\n      host: 'localhost',\n      port: 3306,\n      database: 'test_db',\n      username: 'test_user',\n      password: 'test_password',\n      pool: {\n        connectionLimit: 5,\n        queueLimit: 0,\n        acquireTimeout: 10000,\n        timeout: 10000,\n        reconnect: true\n      },\n      ...overrides\n    };\n  }\n}\n\n// 导出测试工具\nexport {\n  sleep,\n  createTestDatabaseConfig,\n  randomString,\n  generateTestTableName,\n  isEmpty,\n  deepClone\n};"],"version":3}