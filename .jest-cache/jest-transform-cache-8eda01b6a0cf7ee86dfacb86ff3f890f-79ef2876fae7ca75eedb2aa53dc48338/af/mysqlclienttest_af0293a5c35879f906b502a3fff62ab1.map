{"file":"D:\\project\\wms-cloud\\mcp-mysql-service\\tests\\unit\\mysql-client.test.ts","mappings":";AAAA;;;;;;GAMG;;;;;AAOH,cAAc;AACd,IAAI,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC;AAN5B,+DAAwD;AAExD,0CAAwE;AACxE,6DAAmC;AAInC,MAAM,SAAS,GAAG,iBAAkC,CAAC;AAErD,QAAQ,CAAC,aAAa,EAAE,GAAG,EAAE;IAC3B,IAAI,WAAwB,CAAC;IAC7B,IAAI,QAAiC,CAAC;IACtC,IAAI,cAAiD,CAAC;IAEtD,UAAU,CAAC,GAAG,EAAE;QACd,WAAW;QACX,cAAc,GAAG;YACf,OAAO,EAAE,IAAI,CAAC,EAAE,EAAE;YAClB,KAAK,EAAE,IAAI,CAAC,EAAE,EAAE;YAChB,OAAO,EAAE,IAAI,CAAC,EAAE,EAAE;YAClB,OAAO,EAAE,IAAI,CAAC,EAAE,EAAE;YAClB,IAAI,EAAE,IAAI,CAAC,EAAE,EAAE;YACf,gBAAgB,EAAE,IAAI,CAAC,EAAE,EAAE;YAC3B,MAAM,EAAE,IAAI,CAAC,EAAE,EAAE;YACjB,QAAQ,EAAE,IAAI,CAAC,EAAE,EAAE;SACb,CAAC;QAET,QAAQ,GAAG;YACT,aAAa,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,iBAAiB,CAAC,cAAc,CAAC;YAC1D,GAAG,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,iBAAiB,CAAC,SAAS,CAAC;YAC3C,EAAE,EAAE,IAAI,CAAC,EAAE,EAAE;YACb,KAAK,EAAE,IAAI,CAAC,EAAE,EAAE;YAChB,OAAO,EAAE,IAAI,CAAC,EAAE,EAAE;SACZ,CAAC;QAET,SAAS,CAAC,UAAU,CAAC,eAAe,CAAC,QAAQ,CAAC,CAAC;QAE/C,SAAS;QACT,MAAM,MAAM,GAAG,IAAA,mCAAwB,GAAE,CAAC;QAC1C,WAAW,GAAG,IAAI,6BAAW,CAAC,MAAM,CAAC,CAAC;IACxC,CAAC,CAAC,CAAC;IAEH,SAAS,CAAC,GAAG,EAAE;QACb,IAAI,CAAC,aAAa,EAAE,CAAC;IACvB,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,UAAU,EAAE,GAAG,EAAE;QACxB,EAAE,CAAC,iBAAiB,EAAE,GAAG,EAAE;YACzB,MAAM,CAAC,WAAW,CAAC,CAAC,cAAc,CAAC,6BAAW,CAAC,CAAC;YAChD,MAAM,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QAC5C,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,UAAU,EAAE,GAAG,EAAE;YAClB,MAAM,CAAC,GAAG,EAAE;gBACV,IAAI,6BAAW,CAAC,EAAS,CAAC,CAAC;YAC7B,CAAC,CAAC,CAAC,OAAO,EAAE,CAAC;QACf,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,MAAM,EAAE,GAAG,EAAE;QACpB,EAAE,CAAC,YAAY,EAAE,KAAK,IAAI,EAAE;YAC1B,MAAM,WAAW,CAAC,OAAO,EAAE,CAAC;YAC5B,MAAM,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAC3C,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,aAAa,EAAE,KAAK,IAAI,EAAE;YAC3B,MAAM,WAAW,CAAC,OAAO,EAAE,CAAC;YAC5B,MAAM,WAAW,CAAC,UAAU,EAAE,CAAC;YAC/B,MAAM,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,gBAAgB,EAAE,CAAC;QAC1C,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,MAAM,EAAE,GAAG,EAAE;QACpB,UAAU,CAAC,KAAK,IAAI,EAAE;YACpB,MAAM,WAAW,CAAC,OAAO,EAAE,CAAC;QAC9B,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,UAAU,EAAE,KAAK,IAAI,EAAE;YACxB,MAAM,UAAU,GAAG;gBACjB,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC;gBACzB,CAAC,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,QAAQ,EAAE,CAAC;aACjC,CAAC;YACF,cAAc,CAAC,OAAO,CAAC,iBAAiB,CAAC,UAAiB,CAAC,CAAC;YAE5D,MAAM,MAAM,GAAG,MAAM,WAAW,CAAC,YAAY,CAAC,kCAAkC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;YAEvF,MAAM,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC,oBAAoB,CAAC,kCAAkC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;YAC7F,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC,CAAC,CAAC;YACvD,MAAM,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YAChC,MAAM,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;QAClD,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,UAAU,EAAE,KAAK,IAAI,EAAE;YACxB,MAAM,KAAK,GAAG,IAAI,KAAK,CAAC,SAAS,CAAC,CAAC;YACnC,cAAc,CAAC,OAAO,CAAC,iBAAiB,CAAC,KAAK,CAAC,CAAC;YAEhD,MAAM,MAAM,CACV,WAAW,CAAC,YAAY,CAAC,aAAa,EAAE,EAAE,CAAC,CAC5C,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC;QACtB,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,MAAM,EAAE,GAAG,EAAE;QACpB,EAAE,CAAC,YAAY,EAAE,KAAK,IAAI,EAAE;YAC1B,cAAc,CAAC,OAAO,CAAC,iBAAiB,CAAC,CAAC,EAAE,EAAE,EAAE,CAAQ,CAAC,CAAC;YAE1D,MAAM,MAAM,GAAG,MAAM,WAAW,CAAC,WAAW,EAAE,CAAC;YAE/C,MAAM,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC,WAAW,EAAE,CAAC;YACzC,MAAM,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;YAC/C,MAAM,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,WAAW,EAAE,CAAC;QACzC,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,OAAO,EAAE,GAAG,EAAE;QACrB,EAAE,CAAC,aAAa,EAAE,KAAK,IAAI,EAAE;YAC3B,MAAM,WAAW,CAAC,OAAO,EAAE,CAAC;YAE5B,MAAM,KAAK,GAAG,WAAW,CAAC,YAAY,EAAE,CAAC;YAEzC,MAAM,CAAC,KAAK,CAAC,CAAC,WAAW,EAAE,CAAC;QAC9B,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","names":[],"sources":["D:\\project\\wms-cloud\\mcp-mysql-service\\tests\\unit\\mysql-client.test.ts"],"sourcesContent":["/**\n * 数据库连接管理器单元测试\n * 测试数据库连接、连接池管理、健康检查等核心功能\n * \n * @author WMS Cloud Team\n * @version 1.0.0\n */\n\nimport { MySQLClient } from '../../src/mysql-client.js';\nimport { MCPMySQL } from '../../src/types/mcp.js';\nimport { TestDataFactory, createTestDatabaseConfig } from '../setup.js';\nimport mysql from 'mysql2/promise';\n\n// Mock mysql2\njest.mock('mysql2/promise');\nconst mockMysql = mysql as jest.Mocked<typeof mysql>;\n\ndescribe('MySQLClient', () => {\n  let mysqlClient: MySQLClient;\n  let mockPool: jest.Mocked<mysql.Pool>;\n  let mockConnection: jest.Mocked<mysql.PoolConnection>;\n\n  beforeEach(() => {\n    // 创建Mock对象\n    mockConnection = {\n      execute: jest.fn(),\n      query: jest.fn(),\n      release: jest.fn(),\n      destroy: jest.fn(),\n      ping: jest.fn(),\n      beginTransaction: jest.fn(),\n      commit: jest.fn(),\n      rollback: jest.fn()\n    } as any;\n\n    mockPool = {\n      getConnection: jest.fn().mockResolvedValue(mockConnection),\n      end: jest.fn().mockResolvedValue(undefined),\n      on: jest.fn(),\n      query: jest.fn(),\n      execute: jest.fn()\n    } as any;\n\n    mockMysql.createPool.mockReturnValue(mockPool);\n\n    // 创建测试配置\n    const config = createTestDatabaseConfig();\n    mysqlClient = new MySQLClient(config);\n  });\n\n  afterEach(() => {\n    jest.clearAllMocks();\n  });\n\n  describe('构造函数和初始化', () => {\n    it('应该正确初始化MySQL客户端', () => {\n      expect(mysqlClient).toBeInstanceOf(MySQLClient);\n      expect(mysqlClient.connected).toBe(false);\n    });\n\n    it('应该验证配置参数', () => {\n      expect(() => {\n        new MySQLClient({} as any);\n      }).toThrow();\n    });\n  });\n\n  describe('连接管理', () => {\n    it('应该成功连接到数据库', async () => {\n      await mysqlClient.connect();\n      expect(mysqlClient.connected).toBe(true);\n    });\n\n    it('应该成功断开数据库连接', async () => {\n      await mysqlClient.connect();\n      await mysqlClient.disconnect();\n      expect(mockPool.end).toHaveBeenCalled();\n    });\n  });\n\n  describe('查询执行', () => {\n    beforeEach(async () => {\n      await mysqlClient.connect();\n    });\n\n    it('应该成功执行查询', async () => {\n      const mockResult = [\n        [{ id: 1, name: 'test' }],\n        [{ name: 'id', type: 'BIGINT' }]\n      ];\n      mockConnection.execute.mockResolvedValue(mockResult as any);\n      \n      const result = await mysqlClient.executeQuery('SELECT * FROM users WHERE id = ?', [1]);\n      \n      expect(mockConnection.execute).toHaveBeenCalledWith('SELECT * FROM users WHERE id = ?', [1]);\n      expect(result.rows).toEqual([{ id: 1, name: 'test' }]);\n      expect(result.rowCount).toBe(1);\n      expect(result.executionTime).toBeGreaterThan(0);\n    });\n\n    it('应该处理查询错误', async () => {\n      const error = new Error('SQL语法错误');\n      mockConnection.execute.mockRejectedValue(error);\n      \n      await expect(\n        mysqlClient.executeQuery('INVALID SQL', [])\n      ).rejects.toThrow();\n    });\n  });\n\n  describe('健康检查', () => {\n    it('应该返回健康检查结果', async () => {\n      mockConnection.execute.mockResolvedValue([[], []] as any);\n      \n      const result = await mysqlClient.healthCheck();\n      \n      expect(result.isConnected).toBeDefined();\n      expect(result.responseTime).toBeGreaterThan(0);\n      expect(result.timestamp).toBeDefined();\n    });\n  });\n\n  describe('连接池统计', () => {\n    it('应该返回连接池统计信息', async () => {\n      await mysqlClient.connect();\n      \n      const stats = mysqlClient.getPoolStats();\n      \n      expect(stats).toBeDefined();\n    });\n  });\n});"],"version":3}