9eb415359947a6699c1a9f5eae2fab6f
"use strict";
/**
 * 数据库连接管理器单元测试
 * 测试数据库连接、连接池管理、健康检查等核心功能
 *
 * @author WMS Cloud Team
 * @version 1.0.0
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
// Mock mysql2
jest.mock('mysql2/promise');
const mysql_client_js_1 = require("../../src/mysql-client.js");
const setup_js_1 = require("../setup.js");
const promise_1 = __importDefault(require("mysql2/promise"));
const mockMysql = promise_1.default;
describe('MySQLClient', () => {
    let mysqlClient;
    let mockPool;
    let mockConnection;
    beforeEach(() => {
        // 创建Mock对象
        mockConnection = {
            execute: jest.fn(),
            query: jest.fn(),
            release: jest.fn(),
            destroy: jest.fn(),
            ping: jest.fn(),
            beginTransaction: jest.fn(),
            commit: jest.fn(),
            rollback: jest.fn()
        };
        mockPool = {
            getConnection: jest.fn().mockResolvedValue(mockConnection),
            end: jest.fn().mockResolvedValue(undefined),
            on: jest.fn(),
            query: jest.fn(),
            execute: jest.fn()
        };
        mockMysql.createPool.mockReturnValue(mockPool);
        // 创建测试配置
        const config = (0, setup_js_1.createTestDatabaseConfig)();
        mysqlClient = new mysql_client_js_1.MySQLClient(config);
    });
    afterEach(() => {
        jest.clearAllMocks();
    });
    describe('构造函数和初始化', () => {
        it('应该正确初始化MySQL客户端', () => {
            expect(mysqlClient).toBeInstanceOf(mysql_client_js_1.MySQLClient);
            expect(mysqlClient.connected).toBe(false);
        });
        it('应该验证配置参数', () => {
            expect(() => {
                new mysql_client_js_1.MySQLClient({});
            }).toThrow();
        });
    });
    describe('连接管理', () => {
        it('应该成功连接到数据库', async () => {
            await mysqlClient.connect();
            expect(mysqlClient.connected).toBe(true);
        });
        it('应该成功断开数据库连接', async () => {
            await mysqlClient.connect();
            await mysqlClient.disconnect();
            expect(mockPool.end).toHaveBeenCalled();
        });
    });
    describe('查询执行', () => {
        beforeEach(async () => {
            await mysqlClient.connect();
        });
        it('应该成功执行查询', async () => {
            const mockResult = [
                [{ id: 1, name: 'test' }],
                [{ name: 'id', type: 'BIGINT' }]
            ];
            mockConnection.execute.mockResolvedValue(mockResult);
            const result = await mysqlClient.executeQuery('SELECT * FROM users WHERE id = ?', [1]);
            expect(mockConnection.execute).toHaveBeenCalledWith('SELECT * FROM users WHERE id = ?', [1]);
            expect(result.rows).toEqual([{ id: 1, name: 'test' }]);
            expect(result.rowCount).toBe(1);
            expect(result.executionTime).toBeGreaterThan(0);
        });
        it('应该处理查询错误', async () => {
            const error = new Error('SQL语法错误');
            mockConnection.execute.mockRejectedValue(error);
            await expect(mysqlClient.executeQuery('INVALID SQL', [])).rejects.toThrow();
        });
    });
    describe('健康检查', () => {
        it('应该返回健康检查结果', async () => {
            mockConnection.execute.mockResolvedValue([[], []]);
            const result = await mysqlClient.healthCheck();
            expect(result.isConnected).toBeDefined();
            expect(result.responseTime).toBeGreaterThan(0);
            expect(result.timestamp).toBeDefined();
        });
    });
    describe('连接池统计', () => {
        it('应该返回连接池统计信息', async () => {
            await mysqlClient.connect();
            const stats = mysqlClient.getPoolStats();
            expect(stats).toBeDefined();
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiRDpcXHByb2plY3RcXHdtcy1jbG91ZFxcbWNwLW15c3FsLXNlcnZpY2VcXHRlc3RzXFx1bml0XFxteXNxbC1jbGllbnQudGVzdC50cyIsIm1hcHBpbmdzIjoiO0FBQUE7Ozs7OztHQU1HOzs7OztBQU9ILGNBQWM7QUFDZCxJQUFJLENBQUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLENBQUM7QUFONUIsK0RBQXdEO0FBRXhELDBDQUF3RTtBQUN4RSw2REFBbUM7QUFJbkMsTUFBTSxTQUFTLEdBQUcsaUJBQWtDLENBQUM7QUFFckQsUUFBUSxDQUFDLGFBQWEsRUFBRSxHQUFHLEVBQUU7SUFDM0IsSUFBSSxXQUF3QixDQUFDO0lBQzdCLElBQUksUUFBaUMsQ0FBQztJQUN0QyxJQUFJLGNBQWlELENBQUM7SUFFdEQsVUFBVSxDQUFDLEdBQUcsRUFBRTtRQUNkLFdBQVc7UUFDWCxjQUFjLEdBQUc7WUFDZixPQUFPLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRTtZQUNsQixLQUFLLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRTtZQUNoQixPQUFPLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRTtZQUNsQixPQUFPLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRTtZQUNsQixJQUFJLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRTtZQUNmLGdCQUFnQixFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUU7WUFDM0IsTUFBTSxFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUU7WUFDakIsUUFBUSxFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUU7U0FDYixDQUFDO1FBRVQsUUFBUSxHQUFHO1lBQ1QsYUFBYSxFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxjQUFjLENBQUM7WUFDMUQsR0FBRyxFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxTQUFTLENBQUM7WUFDM0MsRUFBRSxFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUU7WUFDYixLQUFLLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRTtZQUNoQixPQUFPLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRTtTQUNaLENBQUM7UUFFVCxTQUFTLENBQUMsVUFBVSxDQUFDLGVBQWUsQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUUvQyxTQUFTO1FBQ1QsTUFBTSxNQUFNLEdBQUcsSUFBQSxtQ0FBd0IsR0FBRSxDQUFDO1FBQzFDLFdBQVcsR0FBRyxJQUFJLDZCQUFXLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDeEMsQ0FBQyxDQUFDLENBQUM7SUFFSCxTQUFTLENBQUMsR0FBRyxFQUFFO1FBQ2IsSUFBSSxDQUFDLGFBQWEsRUFBRSxDQUFDO0lBQ3ZCLENBQUMsQ0FBQyxDQUFDO0lBRUgsUUFBUSxDQUFDLFVBQVUsRUFBRSxHQUFHLEVBQUU7UUFDeEIsRUFBRSxDQUFDLGlCQUFpQixFQUFFLEdBQUcsRUFBRTtZQUN6QixNQUFNLENBQUMsV0FBVyxDQUFDLENBQUMsY0FBYyxDQUFDLDZCQUFXLENBQUMsQ0FBQztZQUNoRCxNQUFNLENBQUMsV0FBVyxDQUFDLFNBQVMsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUM1QyxDQUFDLENBQUMsQ0FBQztRQUVILEVBQUUsQ0FBQyxVQUFVLEVBQUUsR0FBRyxFQUFFO1lBQ2xCLE1BQU0sQ0FBQyxHQUFHLEVBQUU7Z0JBQ1YsSUFBSSw2QkFBVyxDQUFDLEVBQVMsQ0FBQyxDQUFDO1lBQzdCLENBQUMsQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFDO1FBQ2YsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDLENBQUMsQ0FBQztJQUVILFFBQVEsQ0FBQyxNQUFNLEVBQUUsR0FBRyxFQUFFO1FBQ3BCLEVBQUUsQ0FBQyxZQUFZLEVBQUUsS0FBSyxJQUFJLEVBQUU7WUFDMUIsTUFBTSxXQUFXLENBQUMsT0FBTyxFQUFFLENBQUM7WUFDNUIsTUFBTSxDQUFDLFdBQVcsQ0FBQyxTQUFTLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDM0MsQ0FBQyxDQUFDLENBQUM7UUFFSCxFQUFFLENBQUMsYUFBYSxFQUFFLEtBQUssSUFBSSxFQUFFO1lBQzNCLE1BQU0sV0FBVyxDQUFDLE9BQU8sRUFBRSxDQUFDO1lBQzVCLE1BQU0sV0FBVyxDQUFDLFVBQVUsRUFBRSxDQUFDO1lBQy9CLE1BQU0sQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQztRQUMxQyxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQyxDQUFDO0lBRUgsUUFBUSxDQUFDLE1BQU0sRUFBRSxHQUFHLEVBQUU7UUFDcEIsVUFBVSxDQUFDLEtBQUssSUFBSSxFQUFFO1lBQ3BCLE1BQU0sV0FBVyxDQUFDLE9BQU8sRUFBRSxDQUFDO1FBQzlCLENBQUMsQ0FBQyxDQUFDO1FBRUgsRUFBRSxDQUFDLFVBQVUsRUFBRSxLQUFLLElBQUksRUFBRTtZQUN4QixNQUFNLFVBQVUsR0FBRztnQkFDakIsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxDQUFDO2dCQUN6QixDQUFDLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsUUFBUSxFQUFFLENBQUM7YUFDakMsQ0FBQztZQUNGLGNBQWMsQ0FBQyxPQUFPLENBQUMsaUJBQWlCLENBQUMsVUFBaUIsQ0FBQyxDQUFDO1lBRTVELE1BQU0sTUFBTSxHQUFHLE1BQU0sV0FBVyxDQUFDLFlBQVksQ0FBQyxrQ0FBa0MsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFFdkYsTUFBTSxDQUFDLGNBQWMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxvQkFBb0IsQ0FBQyxrQ0FBa0MsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDN0YsTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxDQUFDLENBQUMsQ0FBQztZQUN2RCxNQUFNLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNoQyxNQUFNLENBQUMsTUFBTSxDQUFDLGFBQWEsQ0FBQyxDQUFDLGVBQWUsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNsRCxDQUFDLENBQUMsQ0FBQztRQUVILEVBQUUsQ0FBQyxVQUFVLEVBQUUsS0FBSyxJQUFJLEVBQUU7WUFDeEIsTUFBTSxLQUFLLEdBQUcsSUFBSSxLQUFLLENBQUMsU0FBUyxDQUFDLENBQUM7WUFDbkMsY0FBYyxDQUFDLE9BQU8sQ0FBQyxpQkFBaUIsQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUVoRCxNQUFNLE1BQU0sQ0FDVixXQUFXLENBQUMsWUFBWSxDQUFDLGFBQWEsRUFBRSxFQUFFLENBQUMsQ0FDNUMsQ0FBQyxPQUFPLENBQUMsT0FBTyxFQUFFLENBQUM7UUFDdEIsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDLENBQUMsQ0FBQztJQUVILFFBQVEsQ0FBQyxNQUFNLEVBQUUsR0FBRyxFQUFFO1FBQ3BCLEVBQUUsQ0FBQyxZQUFZLEVBQUUsS0FBSyxJQUFJLEVBQUU7WUFDMUIsY0FBYyxDQUFDLE9BQU8sQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQVEsQ0FBQyxDQUFDO1lBRTFELE1BQU0sTUFBTSxHQUFHLE1BQU0sV0FBVyxDQUFDLFdBQVcsRUFBRSxDQUFDO1lBRS9DLE1BQU0sQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDLENBQUMsV0FBVyxFQUFFLENBQUM7WUFDekMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxZQUFZLENBQUMsQ0FBQyxlQUFlLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDL0MsTUFBTSxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsQ0FBQyxXQUFXLEVBQUUsQ0FBQztRQUN6QyxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQyxDQUFDO0lBRUgsUUFBUSxDQUFDLE9BQU8sRUFBRSxHQUFHLEVBQUU7UUFDckIsRUFBRSxDQUFDLGFBQWEsRUFBRSxLQUFLLElBQUksRUFBRTtZQUMzQixNQUFNLFdBQVcsQ0FBQyxPQUFPLEVBQUUsQ0FBQztZQUU1QixNQUFNLEtBQUssR0FBRyxXQUFXLENBQUMsWUFBWSxFQUFFLENBQUM7WUFFekMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLFdBQVcsRUFBRSxDQUFDO1FBQzlCLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDLENBQUMsQ0FBQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyJEOlxccHJvamVjdFxcd21zLWNsb3VkXFxtY3AtbXlzcWwtc2VydmljZVxcdGVzdHNcXHVuaXRcXG15c3FsLWNsaWVudC50ZXN0LnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICog5pWw5o2u5bqT6L+e5o6l566h55CG5Zmo5Y2V5YWD5rWL6K+VXG4gKiDmtYvor5XmlbDmja7lupPov57mjqXjgIHov57mjqXmsaDnrqHnkIbjgIHlgaXlurfmo4Dmn6XnrYnmoLjlv4Plip/og71cbiAqIFxuICogQGF1dGhvciBXTVMgQ2xvdWQgVGVhbVxuICogQHZlcnNpb24gMS4wLjBcbiAqL1xuXG5pbXBvcnQgeyBNeVNRTENsaWVudCB9IGZyb20gJy4uLy4uL3NyYy9teXNxbC1jbGllbnQuanMnO1xuaW1wb3J0IHsgTUNQTXlTUUwgfSBmcm9tICcuLi8uLi9zcmMvdHlwZXMvbWNwLmpzJztcbmltcG9ydCB7IFRlc3REYXRhRmFjdG9yeSwgY3JlYXRlVGVzdERhdGFiYXNlQ29uZmlnIH0gZnJvbSAnLi4vc2V0dXAuanMnO1xuaW1wb3J0IG15c3FsIGZyb20gJ215c3FsMi9wcm9taXNlJztcblxuLy8gTW9jayBteXNxbDJcbmplc3QubW9jaygnbXlzcWwyL3Byb21pc2UnKTtcbmNvbnN0IG1vY2tNeXNxbCA9IG15c3FsIGFzIGplc3QuTW9ja2VkPHR5cGVvZiBteXNxbD47XG5cbmRlc2NyaWJlKCdNeVNRTENsaWVudCcsICgpID0+IHtcbiAgbGV0IG15c3FsQ2xpZW50OiBNeVNRTENsaWVudDtcbiAgbGV0IG1vY2tQb29sOiBqZXN0Lk1vY2tlZDxteXNxbC5Qb29sPjtcbiAgbGV0IG1vY2tDb25uZWN0aW9uOiBqZXN0Lk1vY2tlZDxteXNxbC5Qb29sQ29ubmVjdGlvbj47XG5cbiAgYmVmb3JlRWFjaCgoKSA9PiB7XG4gICAgLy8g5Yib5bu6TW9ja+WvueixoVxuICAgIG1vY2tDb25uZWN0aW9uID0ge1xuICAgICAgZXhlY3V0ZTogamVzdC5mbigpLFxuICAgICAgcXVlcnk6IGplc3QuZm4oKSxcbiAgICAgIHJlbGVhc2U6IGplc3QuZm4oKSxcbiAgICAgIGRlc3Ryb3k6IGplc3QuZm4oKSxcbiAgICAgIHBpbmc6IGplc3QuZm4oKSxcbiAgICAgIGJlZ2luVHJhbnNhY3Rpb246IGplc3QuZm4oKSxcbiAgICAgIGNvbW1pdDogamVzdC5mbigpLFxuICAgICAgcm9sbGJhY2s6IGplc3QuZm4oKVxuICAgIH0gYXMgYW55O1xuXG4gICAgbW9ja1Bvb2wgPSB7XG4gICAgICBnZXRDb25uZWN0aW9uOiBqZXN0LmZuKCkubW9ja1Jlc29sdmVkVmFsdWUobW9ja0Nvbm5lY3Rpb24pLFxuICAgICAgZW5kOiBqZXN0LmZuKCkubW9ja1Jlc29sdmVkVmFsdWUodW5kZWZpbmVkKSxcbiAgICAgIG9uOiBqZXN0LmZuKCksXG4gICAgICBxdWVyeTogamVzdC5mbigpLFxuICAgICAgZXhlY3V0ZTogamVzdC5mbigpXG4gICAgfSBhcyBhbnk7XG5cbiAgICBtb2NrTXlzcWwuY3JlYXRlUG9vbC5tb2NrUmV0dXJuVmFsdWUobW9ja1Bvb2wpO1xuXG4gICAgLy8g5Yib5bu65rWL6K+V6YWN572uXG4gICAgY29uc3QgY29uZmlnID0gY3JlYXRlVGVzdERhdGFiYXNlQ29uZmlnKCk7XG4gICAgbXlzcWxDbGllbnQgPSBuZXcgTXlTUUxDbGllbnQoY29uZmlnKTtcbiAgfSk7XG5cbiAgYWZ0ZXJFYWNoKCgpID0+IHtcbiAgICBqZXN0LmNsZWFyQWxsTW9ja3MoKTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ+aehOmAoOWHveaVsOWSjOWIneWni+WMlicsICgpID0+IHtcbiAgICBpdCgn5bqU6K+l5q2j56Gu5Yid5aeL5YyWTXlTUUzlrqLmiLfnq68nLCAoKSA9PiB7XG4gICAgICBleHBlY3QobXlzcWxDbGllbnQpLnRvQmVJbnN0YW5jZU9mKE15U1FMQ2xpZW50KTtcbiAgICAgIGV4cGVjdChteXNxbENsaWVudC5jb25uZWN0ZWQpLnRvQmUoZmFsc2UpO1xuICAgIH0pO1xuXG4gICAgaXQoJ+W6lOivpemqjOivgemFjee9ruWPguaVsCcsICgpID0+IHtcbiAgICAgIGV4cGVjdCgoKSA9PiB7XG4gICAgICAgIG5ldyBNeVNRTENsaWVudCh7fSBhcyBhbnkpO1xuICAgICAgfSkudG9UaHJvdygpO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgn6L+e5o6l566h55CGJywgKCkgPT4ge1xuICAgIGl0KCflupTor6XmiJDlip/ov57mjqXliLDmlbDmja7lupMnLCBhc3luYyAoKSA9PiB7XG4gICAgICBhd2FpdCBteXNxbENsaWVudC5jb25uZWN0KCk7XG4gICAgICBleHBlY3QobXlzcWxDbGllbnQuY29ubmVjdGVkKS50b0JlKHRydWUpO1xuICAgIH0pO1xuXG4gICAgaXQoJ+W6lOivpeaIkOWKn+aWreW8gOaVsOaNruW6k+i/nuaOpScsIGFzeW5jICgpID0+IHtcbiAgICAgIGF3YWl0IG15c3FsQ2xpZW50LmNvbm5lY3QoKTtcbiAgICAgIGF3YWl0IG15c3FsQ2xpZW50LmRpc2Nvbm5lY3QoKTtcbiAgICAgIGV4cGVjdChtb2NrUG9vbC5lbmQpLnRvSGF2ZUJlZW5DYWxsZWQoKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ+afpeivouaJp+ihjCcsICgpID0+IHtcbiAgICBiZWZvcmVFYWNoKGFzeW5jICgpID0+IHtcbiAgICAgIGF3YWl0IG15c3FsQ2xpZW50LmNvbm5lY3QoKTtcbiAgICB9KTtcblxuICAgIGl0KCflupTor6XmiJDlip/miafooYzmn6Xor6InLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBtb2NrUmVzdWx0ID0gW1xuICAgICAgICBbeyBpZDogMSwgbmFtZTogJ3Rlc3QnIH1dLFxuICAgICAgICBbeyBuYW1lOiAnaWQnLCB0eXBlOiAnQklHSU5UJyB9XVxuICAgICAgXTtcbiAgICAgIG1vY2tDb25uZWN0aW9uLmV4ZWN1dGUubW9ja1Jlc29sdmVkVmFsdWUobW9ja1Jlc3VsdCBhcyBhbnkpO1xuICAgICAgXG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBteXNxbENsaWVudC5leGVjdXRlUXVlcnkoJ1NFTEVDVCAqIEZST00gdXNlcnMgV0hFUkUgaWQgPSA/JywgWzFdKTtcbiAgICAgIFxuICAgICAgZXhwZWN0KG1vY2tDb25uZWN0aW9uLmV4ZWN1dGUpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKCdTRUxFQ1QgKiBGUk9NIHVzZXJzIFdIRVJFIGlkID0gPycsIFsxXSk7XG4gICAgICBleHBlY3QocmVzdWx0LnJvd3MpLnRvRXF1YWwoW3sgaWQ6IDEsIG5hbWU6ICd0ZXN0JyB9XSk7XG4gICAgICBleHBlY3QocmVzdWx0LnJvd0NvdW50KS50b0JlKDEpO1xuICAgICAgZXhwZWN0KHJlc3VsdC5leGVjdXRpb25UaW1lKS50b0JlR3JlYXRlclRoYW4oMCk7XG4gICAgfSk7XG5cbiAgICBpdCgn5bqU6K+l5aSE55CG5p+l6K+i6ZSZ6K+vJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgZXJyb3IgPSBuZXcgRXJyb3IoJ1NRTOivreazlemUmeivrycpO1xuICAgICAgbW9ja0Nvbm5lY3Rpb24uZXhlY3V0ZS5tb2NrUmVqZWN0ZWRWYWx1ZShlcnJvcik7XG4gICAgICBcbiAgICAgIGF3YWl0IGV4cGVjdChcbiAgICAgICAgbXlzcWxDbGllbnQuZXhlY3V0ZVF1ZXJ5KCdJTlZBTElEIFNRTCcsIFtdKVxuICAgICAgKS5yZWplY3RzLnRvVGhyb3coKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ+WBpeW6t+ajgOafpScsICgpID0+IHtcbiAgICBpdCgn5bqU6K+l6L+U5Zue5YGl5bq35qOA5p+l57uT5p6cJywgYXN5bmMgKCkgPT4ge1xuICAgICAgbW9ja0Nvbm5lY3Rpb24uZXhlY3V0ZS5tb2NrUmVzb2x2ZWRWYWx1ZShbW10sIFtdXSBhcyBhbnkpO1xuICAgICAgXG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBteXNxbENsaWVudC5oZWFsdGhDaGVjaygpO1xuICAgICAgXG4gICAgICBleHBlY3QocmVzdWx0LmlzQ29ubmVjdGVkKS50b0JlRGVmaW5lZCgpO1xuICAgICAgZXhwZWN0KHJlc3VsdC5yZXNwb25zZVRpbWUpLnRvQmVHcmVhdGVyVGhhbigwKTtcbiAgICAgIGV4cGVjdChyZXN1bHQudGltZXN0YW1wKS50b0JlRGVmaW5lZCgpO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgn6L+e5o6l5rGg57uf6K6hJywgKCkgPT4ge1xuICAgIGl0KCflupTor6Xov5Tlm57ov57mjqXmsaDnu5/orqHkv6Hmga8nLCBhc3luYyAoKSA9PiB7XG4gICAgICBhd2FpdCBteXNxbENsaWVudC5jb25uZWN0KCk7XG4gICAgICBcbiAgICAgIGNvbnN0IHN0YXRzID0gbXlzcWxDbGllbnQuZ2V0UG9vbFN0YXRzKCk7XG4gICAgICBcbiAgICAgIGV4cGVjdChzdGF0cykudG9CZURlZmluZWQoKTtcbiAgICB9KTtcbiAgfSk7XG59KTsiXSwidmVyc2lvbiI6M30=